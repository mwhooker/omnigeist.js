[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"domain": "jashkenas.github.com", "media_embed": {}, "levenshtein": null, "subreddit": "programming", "selftext_html": null, "selftext": "", "likes": null, "saved": false, "id": "ai9kk", "clicked": false, "author": "jashkenas", "media": null, "score": 144, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2fwo", "downs": 52, "is_self": false, "permalink": "/r/programming/comments/ai9kk/coffeescript_a_little_language_that_compiles_to/", "name": "t3_ai9kk", "created": 1261678089.0, "url": "http://jashkenas.github.com/coffee-script/", "title": "CoffeeScript, a little language that compiles to JavaScript. (Happy Holidays, Proggit)", "created_utc": 1261678089.0, "num_comments": 100, "ups": 196}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "JavaScript has always had a gorgeous object model hidden within Java-esque syntax. CoffeeScript is an attempt to expose the good parts of JavaScript through syntax that favors expressions over statements, cuts down on punctuation noise, and provides pretty function literals. This CoffeeScript:\n\n    square: x =&gt; x * x.\n\nCompiles into this JavaScript:\n\n    var square = function(x) {\n      return x * x;\n    };\n\nIf anyone has specific ideas about aspects of JavaScript that they think could be more convenient or better-looking, I'd love to hear them. Cheers.", "subreddit_id": "t5_2fwo", "name": "t1_c0hov6l", "author": "jashkenas", "downs": 5, "created": 1261678114.0, "created_utc": 1261678114.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;JavaScript has always had a gorgeous object model hidden within Java-esque syntax. CoffeeScript is an attempt to expose the good parts of JavaScript through syntax that favors expressions over statements, cuts down on punctuation noise, and provides pretty function literals. This CoffeeScript:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;square: x =&amp;gt; x * x.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Compiles into this JavaScript:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var square = function(x) {\n  return x * x;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If anyone has specific ideas about aspects of JavaScript that they think could be more convenient or better-looking, I'd love to hear them. Cheers.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t3_ai9kk", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "Can you add currying?\n", "subreddit_id": "t5_2fwo", "name": "t1_c0hoy4l", "author": "FlySwat", "downs": 3, "created": 1261681585.0, "created_utc": 1261681585.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Can you add currying?&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hov6l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "Interesting idea -- do you have a proposal for the curry literal syntax? Do you think it would compile into **call** and **apply**, or produce a re-written version of the function?", "subreddit_id": "t5_2fwo", "name": "t1_c0hp0cq", "author": "jashkenas", "downs": 1, "created": 1261684379.0, "created_utc": 1261684379.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Interesting idea -- do you have a proposal for the curry literal syntax? Do you think it would compile into &lt;strong&gt;call&lt;/strong&gt; and &lt;strong&gt;apply&lt;/strong&gt;, or produce a re-written version of the function?&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hoy4l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "could do something like:\n\nf: x, y =&gt; x + y\n\ntranslate to \n\nf = function (x) { return function(y) { return x + y; }; };\n\nprobably not efficient...", "subreddit_id": "t5_2fwo", "name": "t1_c0hp5fi", "author": "kcuf", "downs": 0, "created": 1261690763.0, "created_utc": 1261690763.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;could do something like:&lt;/p&gt;\n\n&lt;p&gt;f: x, y =&gt; x + y&lt;/p&gt;\n\n&lt;p&gt;translate to&lt;/p&gt;\n\n&lt;p&gt;f = function (x) { return function(y) { return x + y; }; };&lt;/p&gt;\n\n&lt;p&gt;probably not efficient...&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hp0cq", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "Er, what you just wrote is valid CoffeeScript syntax for the sum of two numbers:\n\n    bin/coffee-script -e \"f: x, y =&gt; x + y.\"\n\nProduces:\n\n    var f = function(x, y) {\n      return x + y;\n    };\n\n", "subreddit_id": "t5_2fwo", "name": "t1_c0hp5mf", "author": "jashkenas", "downs": 0, "created": 1261691019.0, "created_utc": 1261691019.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Er, what you just wrote is valid CoffeeScript syntax for the sum of two numbers:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;bin/coffee-script -e \"f: x, y =&amp;gt; x + y.\"\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Produces:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var f = function(x, y) {\n  return x + y;\n};\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hp5fi", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "I think he's proposing the syntax not change but the result of that syntax be a higher order, curried function. Of course, you then need to rejigger your call generator, and I'm sure rabbit holes abound from there! Just getting it to work probably would be tricky, then you end up with much slower code to boot. Probably not worth it, unless you can prove that V8/seamonkey will smartly JIT away the intermediate calls (doubtful.)", "subreddit_id": "t5_2fwo", "name": "t1_c0hp95f", "author": "nebby", "downs": 2, "created": 1261695989.0, "created_utc": 1261695989.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think he's proposing the syntax not change but the result of that syntax be a higher order, curried function. Of course, you then need to rejigger your call generator, and I'm sure rabbit holes abound from there! Just getting it to work probably would be tricky, then you end up with much slower code to boot. Probably not worth it, unless you can prove that V8/seamonkey will smartly JIT away the intermediate calls (doubtful.)&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hp5mf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "exactly", "subreddit_id": "t5_2fwo", "name": "t1_c0hpsj7", "author": "kcuf", "downs": 0, "created": 1261722534.0, "created_utc": 1261722534.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;exactly&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hp95f", "likes": null, "replies": "", "id": "c0hpsj7", "subreddit": "programming", "ups": 1}}], "after": null, "before": null}}, "id": "c0hp95f", "subreddit": "programming", "ups": 7}}], "after": null, "before": null}}, "id": "c0hp5mf", "subreddit": "programming", "ups": 1}}, {"kind": "t1", "data": {"body": "Would you have a syntax for partially applying all of the arguments, but not entering the function yet? e.g. translating\n\n    f: x, y =&gt; x + y\n\nto\n\n    f = function (x) { return function(y) { return function() { return x + y; }; }; };\n\n(something to think about)", "subreddit_id": "t5_2fwo", "name": "t1_c0hpa73", "author": "sciolizer", "downs": 0, "created": 1261697644.0, "created_utc": 1261697644.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Would you have a syntax for partially applying all of the arguments, but not entering the function yet? e.g. translating&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;f: x, y =&amp;gt; x + y\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;f = function (x) { return function(y) { return function() { return x + y; }; }; };\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(something to think about)&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hp5fi", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "Why would you want that?", "subreddit_id": "t5_2fwo", "name": "t1_c0hpr7w", "author": "SohumB", "downs": 0, "created": 1261721010.0, "created_utc": 1261721010.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Why would you want that?&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hpa73", "likes": null, "replies": "", "id": "c0hpr7w", "subreddit": "programming", "ups": 4}}], "after": null, "before": null}}, "id": "c0hpa73", "subreddit": "programming", "ups": 1}}], "after": null, "before": null}}, "id": "c0hp5fi", "subreddit": "programming", "ups": 2}}], "after": null, "before": null}}, "id": "c0hp0cq", "subreddit": "programming", "ups": 3}}, {"kind": "t1", "data": {"body": "This is a slippery slope \u2013 do you want real currying or Haskell-style currying?", "subreddit_id": "t5_2fwo", "name": "t1_c0hp22r", "author": "seydar", "downs": 4, "created": 1261686521.0, "created_utc": 1261686521.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is a slippery slope \u2013 do you want real currying or Haskell-style currying?&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hoy4l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "Can you elaborate the difference, or give a reference to something that does?", "subreddit_id": "t5_2fwo", "name": "t1_c0hp2lx", "author": "goofyheadedpunk", "downs": 0, "created": 1261687208.0, "created_utc": 1261687208.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Can you elaborate the difference, or give a reference to something that does?&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hp22r", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "I spoke too quickly and without verifying my facts.\n\nI woke up from a dream once and immediately set to write a currying function for Ruby (http://pastie.org/756213). Haskell-style currying is **automatically** currying the function (take a look at the code), while apparently normal currying is where you have to **explicitly** curry the function.\n\nSo I was wrong \u2013 they're not actually different in function, just different in usage.", "subreddit_id": "t5_2fwo", "name": "t1_c0hppbf", "author": "seydar", "downs": 0, "created": 1261719155.0, "created_utc": 1261719155.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I spoke too quickly and without verifying my facts.&lt;/p&gt;\n\n&lt;p&gt;I woke up from a dream once and immediately set to write a currying function for Ruby (&lt;a href=\"http://pastie.org/756213\" &gt;http://pastie.org/756213&lt;/a&gt;). Haskell-style currying is &lt;strong&gt;automatically&lt;/strong&gt; currying the function (take a look at the code), while apparently normal currying is where you have to &lt;strong&gt;explicitly&lt;/strong&gt; curry the function.&lt;/p&gt;\n\n&lt;p&gt;So I was wrong \u2013 they're not actually different in function, just different in usage.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hp2lx", "likes": null, "replies": "", "id": "c0hppbf", "subreddit": "programming", "ups": 3}}, {"kind": "t1", "data": {"body": "I was under the impression that to the user [coder] Haskell _looks_ like it will return partial functions and curry things, but in actuality it does some compiler tricks behind the scenes to make things run quickly. If it actually curried and returned partial functions on the fly it would run much slower.\n\nI could be completely wrong though. I may have dreamt that.", "subreddit_id": "t5_2fwo", "name": "t1_c0hp5ao", "author": "quattro", "downs": 1, "created": 1261690564.0, "created_utc": 1261690564.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I was under the impression that to the user [coder] Haskell &lt;em&gt;looks&lt;/em&gt; like it will return partial functions and curry things, but in actuality it does some compiler tricks behind the scenes to make things run quickly. If it actually curried and returned partial functions on the fly it would run much slower.&lt;/p&gt;\n\n&lt;p&gt;I could be completely wrong though. I may have dreamt that.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hp2lx", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "If there is no semantic difference from the user point of view, cannot GHC still be said to properly curry? Nifty compiler tricks that effect the same action, only more efficiently, don't really strip away the nature of a construct, do they?", "subreddit_id": "t5_2fwo", "name": "t1_c0hp5i6", "author": "goofyheadedpunk", "downs": 2, "created": 1261690869.0, "created_utc": 1261690869.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If there is no semantic difference from the user point of view, cannot GHC still be said to properly curry? Nifty compiler tricks that effect the same action, only more efficiently, don't really strip away the nature of a construct, do they?&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hp5ao", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "I believe it is that Haskell **automatically** curries the function, while traditionally you have to explicitly curry it. It's the difference between curry in Indian food (where it's automatically used) and curry in other foods (where it's explicitly used).", "subreddit_id": "t5_2fwo", "name": "t1_c0hppe4", "author": "seydar", "downs": 0, "created": 1261719219.0, "created_utc": 1261719219.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I believe it is that Haskell &lt;strong&gt;automatically&lt;/strong&gt; curries the function, while traditionally you have to explicitly curry it. It's the difference between curry in Indian food (where it's automatically used) and curry in other foods (where it's explicitly used).&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hp5i6", "likes": null, "replies": "", "id": "c0hppe4", "subreddit": "programming", "ups": 3}}, {"kind": "t1", "data": {"body": "Does it make sense to talk about currying with named arguments? In Haskell arguments are always supplied left to right (typing the function signatures `f :: a -&gt; b -&gt; c` assures that), but you could just as easily have something like\n\n    func f  (boolean arg1, string arg2, integer arg3) { ... }\n    func g = f(arg2=\"billy\");\n\n(in no particular language) where the signature of g is\n\n    func g (boolean arg1, integer arg3)\n\nI'm haven't used a language with currying before, so I'm not sure if this sort of approach is deficient in an important way or not.", "subreddit_id": "t5_2fwo", "name": "t1_c0hphyw", "author": "repsilat", "downs": 0, "created": 1261710410.0, "created_utc": 1261710410.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Does it make sense to talk about currying with named arguments? In Haskell arguments are always supplied left to right (typing the function signatures &lt;code&gt;f :: a -&amp;gt; b -&amp;gt; c&lt;/code&gt; assures that), but you could just as easily have something like&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func f  (boolean arg1, string arg2, integer arg3) { ... }\nfunc g = f(arg2=\"billy\");\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(in no particular language) where the signature of g is&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func g (boolean arg1, integer arg3)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I'm haven't used a language with currying before, so I'm not sure if this sort of approach is deficient in an important way or not.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hp5i6", "likes": null, "replies": "", "id": "c0hphyw", "subreddit": "programming", "ups": 1}}], "after": null, "before": null}}, "id": "c0hp5i6", "subreddit": "programming", "ups": 10}}], "after": null, "before": null}}, "id": "c0hp5ao", "subreddit": "programming", "ups": 2}}], "after": null, "before": null}}, "id": "c0hp2lx", "subreddit": "programming", "ups": 6}}], "after": null, "before": null}}, "id": "c0hp22r", "subreddit": "programming", "ups": 6}}], "after": null, "before": null}}, "id": "c0hoy4l", "subreddit": "programming", "ups": 7}}, {"kind": "t1", "data": {"body": "Brilliant!  This is basically a kind of DSL.\n\nThere's no reason it has to only convert to JS -- it could emit C++ as well, and wouldn't that be jolly.\n\nI know it's brilliant because I already did something similar for C++ ;)\n\nProgrammers should customize syntax to fit their own mental models, rather than fighting language holy wars.  Every time someone makes a new language it is inevitably lacking, whereas it's much simpler and more effective to make a DSL and emit code for a stable, supported, debugged language, which can be as UGLY AS NEEDED.\n\nThe notion that someone shouldn't do something a certain way in e.g. C or C++ because it's not idiomatic or because it's ugly is quite funny if you ever look at the ASM generated for \"approved\" code.\n", "subreddit_id": "t5_2fwo", "name": "t1_c0hp5vo", "author": "register_int", "downs": 2, "created": 1261691344.0, "created_utc": 1261691344.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Brilliant!  This is basically a kind of DSL.&lt;/p&gt;\n\n&lt;p&gt;There's no reason it has to only convert to JS -- it could emit C++ as well, and wouldn't that be jolly.&lt;/p&gt;\n\n&lt;p&gt;I know it's brilliant because I already did something similar for C++ ;)&lt;/p&gt;\n\n&lt;p&gt;Programmers should customize syntax to fit their own mental models, rather than fighting language holy wars.  Every time someone makes a new language it is inevitably lacking, whereas it's much simpler and more effective to make a DSL and emit code for a stable, supported, debugged language, which can be as UGLY AS NEEDED.&lt;/p&gt;\n\n&lt;p&gt;The notion that someone shouldn't do something a certain way in e.g. C or C++ because it's not idiomatic or because it's ugly is quite funny if you ever look at the ASM generated for \"approved\" code.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hov6l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "Yeah, that's definitely true, although in this case the target language would need to support prototypal inheritance, anonymous functions, and have the same number semantics as JavaScript, or else you'd have to start implementing those features yourself.\n\nInside of the compiler, we have a nice Ruby AST of the script, and should be able to interpret it directly in Ruby, in theory, but the differences mentioned above make that a little tricky -- arithmetic wouldn't work quite the same, and you'd have to construct objects out of hashes of procs. Would be a fun contribution though, if anyone feels like tackling it.", "subreddit_id": "t5_2fwo", "name": "t1_c0hp6c8", "author": "jashkenas", "downs": 0, "created": 1261691982.0, "created_utc": 1261691982.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yeah, that's definitely true, although in this case the target language would need to support prototypal inheritance, anonymous functions, and have the same number semantics as JavaScript, or else you'd have to start implementing those features yourself.&lt;/p&gt;\n\n&lt;p&gt;Inside of the compiler, we have a nice Ruby AST of the script, and should be able to interpret it directly in Ruby, in theory, but the differences mentioned above make that a little tricky -- arithmetic wouldn't work quite the same, and you'd have to construct objects out of hashes of procs. Would be a fun contribution though, if anyone feels like tackling it.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hp5vo", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "I'm pleased to see the positive reactions you're getting here and on HN.\n\nI think people are ready for a sea-change...\n\nThis is a big competitive advantage for anyone who uses it.  Write code faster thanks to terseness, with more expressiveness and less annoyance.\n\nI guess I need to hurry up before everyone else catches on.  I thought this kind of thing would be a lot more of a hard sell and I'd have more time!\n", "subreddit_id": "t5_2fwo", "name": "t1_c0hp6qs", "author": "register_int", "downs": 0, "created": 1261692607.0, "created_utc": 1261692607.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I'm pleased to see the positive reactions you're getting here and on HN.&lt;/p&gt;\n\n&lt;p&gt;I think people are ready for a sea-change...&lt;/p&gt;\n\n&lt;p&gt;This is a big competitive advantage for anyone who uses it.  Write code faster thanks to terseness, with more expressiveness and less annoyance.&lt;/p&gt;\n\n&lt;p&gt;I guess I need to hurry up before everyone else catches on.  I thought this kind of thing would be a lot more of a hard sell and I'd have more time!&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hp6c8", "likes": null, "replies": "", "id": "c0hp6qs", "subreddit": "programming", "ups": 1}}, {"kind": "t1", "data": {"body": "It's quite easy to make a ruby class that behaves exactly like a javascript class.\n\nJust implement methodMissing to generate an accessor for every unknown method called. Or subclass the class that already does this: \n\nhttp://ruby-doc.org/stdlib/libdoc/ostruct/rdoc/index.html\n\nAnd make the prototype function an alias of 'class'. (the method that returns the class of an instance).\n\nThe automatic typecasting can be a problem though. Although it only happens with a handful of built-in operators in javascript. Perhaps you want to compile those operators to custom functions in ruby that also automatically typecast. OR: do the opposite in javascript, because automatic type casting is evil.", "subreddit_id": "t5_2fwo", "name": "t1_c0hp7i7", "author": "RalfN", "downs": 0, "created": 1261693562.0, "created_utc": 1261693562.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It's quite easy to make a ruby class that behaves exactly like a javascript class.&lt;/p&gt;\n\n&lt;p&gt;Just implement methodMissing to generate an accessor for every unknown method called. Or subclass the class that already does this:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://ruby-doc.org/stdlib/libdoc/ostruct/rdoc/index.html\" &gt;http://ruby-doc.org/stdlib/libdoc/ostruct/rdoc/index.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;And make the prototype function an alias of 'class'. (the method that returns the class of an instance).&lt;/p&gt;\n\n&lt;p&gt;The automatic typecasting can be a problem though. Although it only happens with a handful of built-in operators in javascript. Perhaps you want to compile those operators to custom functions in ruby that also automatically typecast. OR: do the opposite in javascript, because automatic type casting is evil.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hp6c8", "likes": null, "replies": "", "id": "c0hp7i7", "subreddit": "programming", "ups": 1}}], "after": null, "before": null}}, "id": "c0hp6c8", "subreddit": "programming", "ups": 2}}, {"kind": "t1", "data": {"body": "What is the Domain in DSL?", "subreddit_id": "t5_2fwo", "name": "t1_c0hp9zl", "author": "sciolizer", "downs": 0, "created": 1261697323.0, "created_utc": 1261697323.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What is the Domain in DSL?&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hp5vo", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "Whatever domain you have created it for.  Usually, it's for a specific external domain, like web page generation or game AI scripting; but another domain is your internal domain, and developing a syntax and notation that better fits your mental model and aesthetics.\n", "subreddit_id": "t5_2fwo", "name": "t1_c0hpdmy", "author": "register_int", "downs": 0, "created": 1261703060.0, "created_utc": 1261703060.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Whatever domain you have created it for.  Usually, it's for a specific external domain, like web page generation or game AI scripting; but another domain is your internal domain, and developing a syntax and notation that better fits your mental model and aesthetics.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hp9zl", "likes": null, "replies": "", "id": "c0hpdmy", "subreddit": "programming", "ups": 2}}], "after": null, "before": null}}, "id": "c0hp9zl", "subreddit": "programming", "ups": 2}}], "after": null, "before": null}}, "id": "c0hp5vo", "subreddit": "programming", "ups": 7}}, {"kind": "t1", "data": {"body": "Rewrite the compiler itself in CoffeeScript, and put the compiled code on a webpage, as a live demo.\n\nSelf-hosting Pros:  \n\n - all the cool kids do it (John McCarthy, Alan Kay, Dennis Richie etc)\n - it tends to reveal more conceptual gaps than you would have thought likely or even conceptually possible\n\nSelf-hosting Cons:  \n\n - in my experience, it is a *lot* harder than expected; though I think that this case of a layer over Javascript, it probably is powerful enough to do it.\n", "subreddit_id": "t5_2fwo", "name": "t1_c0hpmzz", "author": "13ren", "downs": 0, "created": 1261717000.0, "created_utc": 1261717000.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Rewrite the compiler itself in CoffeeScript, and put the compiled code on a webpage, as a live demo.&lt;/p&gt;\n\n&lt;p&gt;Self-hosting Pros:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;all the cool kids do it (John McCarthy, Alan Kay, Dennis Richie etc)&lt;/li&gt;\n&lt;li&gt;it tends to reveal more conceptual gaps than you would have thought likely or even conceptually possible&lt;/li&gt;\n&lt;/ul&gt;\n\n\n&lt;p&gt;Self-hosting Cons:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;in my experience, it is a &lt;em&gt;lot&lt;/em&gt; harder than expected; though I think that this case of a layer over Javascript, it probably is powerful enough to do it.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hov6l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "That would be ideal. The most difficult part to port would be the parser, which is using Racc at the moment -- a parser generator for Ruby, after Yacc. Finding an alternative that could be used from CoffeeScript would be a little tricky -- either a Crockford-style PEG or Warth's OMeta would be good candidates to try.", "subreddit_id": "t5_2fwo", "name": "t1_c0hpqng", "author": "jashkenas", "downs": 0, "created": 1261720439.0, "created_utc": 1261720439.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That would be ideal. The most difficult part to port would be the parser, which is using Racc at the moment -- a parser generator for Ruby, after Yacc. Finding an alternative that could be used from CoffeeScript would be a little tricky -- either a Crockford-style PEG or Warth's OMeta would be good candidates to try.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hpmzz", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "Opps, I see the first item in your wish list is a Javascript version (though, in my self-defence, I was thinking a self-hosted CoffeeScript version).\n\nI would guess using yacc-style parser generator means that you have a (semi-) formal grammar for the language? If so, it would be cool to link to it on the page (or, even just the specification file directly, so we can browse it without ruby, gem etc).", "subreddit_id": "t5_2fwo", "name": "t1_c0hpsnt", "author": "13ren", "downs": 0, "created": 1261722674.0, "created_utc": 1261722674.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Opps, I see the first item in your wish list is a Javascript version (though, in my self-defence, I was thinking a self-hosted CoffeeScript version).&lt;/p&gt;\n\n&lt;p&gt;I would guess using yacc-style parser generator means that you have a (semi-) formal grammar for the language? If so, it would be cool to link to it on the page (or, even just the specification file directly, so we can browse it without ruby, gem etc).&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hpqng", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "Sure, it's in the github repo, right here:\n\nhttp://github.com/jashkenas/coffee-script/blob/master/lib/coffee_script/grammar.y\n\n(I'll add a link in the docs).", "subreddit_id": "t5_2fwo", "name": "t1_c0hpvmb", "author": "jashkenas", "downs": 1, "created": 1261726312.0, "created_utc": 1261726312.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Sure, it's in the github repo, right here:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://github.com/jashkenas/coffee-script/blob/master/lib/coffee_script/grammar.y\" &gt;http://github.com/jashkenas/coffee-script/blob/master/lib/coffee_script/grammar.y&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;(I'll add a link in the docs).&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hpsnt", "likes": null, "replies": "", "id": "c0hpvmb", "subreddit": "programming", "ups": 5}}], "after": null, "before": null}}, "id": "c0hpsnt", "subreddit": "programming", "ups": 1}}, {"kind": "t1", "data": {"body": "You could also write a recursive-descent parser. This article describe a non-trivial one using Javascript!\r\n\r\nhttp://javascript.crockford.com/tdop/tdop.html", "subreddit_id": "t5_2fwo", "name": "t1_c0hqeda", "author": "amade", "downs": 0, "created": 1261768360.0, "created_utc": 1261768360.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You could also write a recursive-descent parser. This article describe a non-trivial one using Javascript!&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://javascript.crockford.com/tdop/tdop.html\" &gt;http://javascript.crockford.com/tdop/tdop.html&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hpqng", "likes": null, "replies": "", "id": "c0hqeda", "subreddit": "programming", "ups": 1}}], "after": null, "before": null}}, "id": "c0hpqng", "subreddit": "programming", "ups": 3}}], "after": null, "before": null}}, "id": "c0hpmzz", "subreddit": "programming", "ups": 3}}, {"kind": "t1", "data": {"body": "I was actually just writing to wish you a merry christmas and that the little functional bit made my day!\n\nsquare: x =&gt; x * x.\n\nWhat a cute little syntax to implement some very lisp like concepts!  Thanks!", "subreddit_id": "t5_2fwo", "name": "t1_c0hpn0y", "author": "smitting", "downs": 0, "created": 1261717042.0, "created_utc": 1261717042.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I was actually just writing to wish you a merry christmas and that the little functional bit made my day!&lt;/p&gt;\n\n&lt;p&gt;square: x =&gt; x * x.&lt;/p&gt;\n\n&lt;p&gt;What a cute little syntax to implement some very lisp like concepts!  Thanks!&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hov6l", "likes": null, "replies": "", "id": "c0hpn0y", "subreddit": "programming", "ups": 1}}, {"kind": "t1", "data": {"body": "You mention you wanted an OMeta parser so you can run it under JS.\n\nThere is an ometa version of a JS at http://code.google.com/p/es-lab/source/browse/trunk/src/parser/es5parser.ojs that might make at least the embedded JS section parsing better, and I'm sure you can inherit their PrimaryExpression grammar with modifications.", "subreddit_id": "t5_2fwo", "name": "t1_c0hs489", "author": "mikevs", "downs": 0, "created": 1261879900.0, "created_utc": 1261879900.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You mention you wanted an OMeta parser so you can run it under JS.&lt;/p&gt;\n\n&lt;p&gt;There is an ometa version of a JS at &lt;a href=\"http://code.google.com/p/es-lab/source/browse/trunk/src/parser/es5parser.ojs\" &gt;http://code.google.com/p/es-lab/source/browse/trunk/src/parser/es5parser.ojs&lt;/a&gt; that might make at least the embedded JS section parsing better, and I'm sure you can inherit their PrimaryExpression grammar with modifications.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hov6l", "likes": null, "replies": "", "id": "c0hs489", "subreddit": "programming", "ups": 1}}, {"kind": "t1", "data": {"body": "excellent stuff. i'd use it for the implicit returns alone!", "subreddit_id": "t5_2fwo", "name": "t1_c0hu51n", "author": "zem", "downs": 0, "created": 1262006411.0, "created_utc": 1262006411.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;excellent stuff. i'd use it for the implicit returns alone!&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hov6l", "likes": null, "replies": "", "id": "c0hu51n", "subreddit": "programming", "ups": 1}}], "after": null, "before": null}}, "id": "c0hov6l", "subreddit": "programming", "ups": 26}}, {"kind": "t1", "data": {"body": "I want to hand it to you not only for the swell little project, but the well-written content. Good work!", "subreddit_id": "t5_2fwo", "name": "t1_c0hoxq4", "author": "nefigah", "downs": 2, "created": 1261681093.0, "created_utc": 1261681093.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I want to hand it to you not only for the swell little project, but the well-written content. Good work!&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t3_ai9kk", "likes": null, "replies": "", "id": "c0hoxq4", "subreddit": "programming", "ups": 11}}, {"kind": "t1", "data": {"body": "You have an \"aint\" keyword.  Holy crap that's badass.", "subreddit_id": "t5_2fwo", "name": "t1_c0hp9l0", "author": "tophat02", "downs": 0, "created": 1261696672.0, "created_utc": 1261696672.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You have an \"aint\" keyword.  Holy crap that's badass.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t3_ai9kk", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "\\#define aint !=\n", "subreddit_id": "t5_2fwo", "name": "t1_c0hpd7f", "author": "stillalone", "downs": 1, "created": 1261702306.0, "created_utc": 1261702306.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;#define aint !=&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hp9l0", "likes": null, "replies": "", "id": "c0hpd7f", "subreddit": "programming", "ups": 6}}], "after": null, "before": null}}, "id": "c0hp9l0", "subreddit": "programming", "ups": 11}}, {"kind": "t1", "data": {"body": "holy shit, I think I could stand to learn and write js using this.", "subreddit_id": "t5_2fwo", "name": "t1_c0howne", "author": "patbingsoup", "downs": 1, "created": 1261679828.0, "created_utc": 1261679828.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;holy shit, I think I could stand to learn and write js using this.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t3_ai9kk", "likes": null, "replies": "", "id": "c0howne", "subreddit": "programming", "ups": 14}}, {"kind": "t1", "data": {"body": "Hey, so I tried this, and I've come up with a list of annoying show-stopper problems I have with this:\n\n1) Your syntax doesn't support calling a function returned from another function. All my fantasies about making block iterators fell apart. I was hoping to be able to (if i wanted) implement a traditional for loop with:\n\n    my_for(start,end,step)(v =&gt;\n        do_stuff().\n    )\n\nBut, alas, your syntax doesn't support this for some reason..\n\n2) Your array comprehensions only work on arrays. It would be nice if you could make generic generators a la python so I could do something like:\n\n    for a in range (0, 100)\n\nCurrently your system does not support this sort of numeric iteration at all (beyond basic whiles) which is a massive oversight in my opinion. Yes, I could make a function range that produces an array of every integer from 0 to 100, but this would be very inefficient.\n\nAlso, real list comprehensions (i don't know python well so I'll use Haskell here) can draw from multiple lists, i.e\n\n    [(x,y) | x &lt;- [0..3], y &lt;- [5..7]]\n\nwould produce:\n\n    [(0,5),(0,6),(0,7),(1,5),(1,6),(1,7),(2,5),(2,6),(2,7),(3,5),(3,6),(3,7)]\n\nSadly, your array comprehensions appear to be far too limited for this sort of stuff.\n\nAlso, your period syntax is questionable, as is your use of : for defining variables. I would much rather = here, because i'm defining something to be = to something. On top of this, +: and so forth just seem weird.\n\nIf you use layout-sensitive blocking in future, be sure not to break cases like my block iterators above.\n\nFinally, I found myself often encumbered by your interpretation of newlines as end-of-statement delimeters. I'm not sure what to do about it though, cos I hate semicolons too.\n\n", "subreddit_id": "t5_2fwo", "name": "t1_c0hq2l3", "author": "kamatsu", "downs": 0, "created": 1261743403.0, "created_utc": 1261743403.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Hey, so I tried this, and I've come up with a list of annoying show-stopper problems I have with this:&lt;/p&gt;\n\n&lt;p&gt;1) Your syntax doesn't support calling a function returned from another function. All my fantasies about making block iterators fell apart. I was hoping to be able to (if i wanted) implement a traditional for loop with:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;my_for(start,end,step)(v =&amp;gt;\n    do_stuff().\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But, alas, your syntax doesn't support this for some reason..&lt;/p&gt;\n\n&lt;p&gt;2) Your array comprehensions only work on arrays. It would be nice if you could make generic generators a la python so I could do something like:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for a in range (0, 100)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Currently your system does not support this sort of numeric iteration at all (beyond basic whiles) which is a massive oversight in my opinion. Yes, I could make a function range that produces an array of every integer from 0 to 100, but this would be very inefficient.&lt;/p&gt;\n\n&lt;p&gt;Also, real list comprehensions (i don't know python well so I'll use Haskell here) can draw from multiple lists, i.e&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[(x,y) | x &amp;lt;- [0..3], y &amp;lt;- [5..7]]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;would produce:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[(0,5),(0,6),(0,7),(1,5),(1,6),(1,7),(2,5),(2,6),(2,7),(3,5),(3,6),(3,7)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Sadly, your array comprehensions appear to be far too limited for this sort of stuff.&lt;/p&gt;\n\n&lt;p&gt;Also, your period syntax is questionable, as is your use of : for defining variables. I would much rather = here, because i'm defining something to be = to something. On top of this, +: and so forth just seem weird.&lt;/p&gt;\n\n&lt;p&gt;If you use layout-sensitive blocking in future, be sure not to break cases like my block iterators above.&lt;/p&gt;\n\n&lt;p&gt;Finally, I found myself often encumbered by your interpretation of newlines as end-of-statement delimeters. I'm not sure what to do about it though, cos I hate semicolons too.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t3_ai9kk", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "Thanks for taking the time to try this. It's detailed reports like these that really help get things fixed. Not allowing chained function calls was an oversight in the grammar. I've pushed a commit that fixes it. Your for-loop example compiles into: \n\n    my_for(start, end, step)(function(v) {\n      return do_stuff();\n    });\n\nSince I'm compiling directly to JavaScript, and not adding extra stuff at runtime, I'm not sure if I could add the efficient range generators that you're asking for, but ranges certainly could be expanded into their equivalent arrays at runtime. Or better, perhaps ranges are special arguments to array comprehensions, that get converted into the equivalent for loop.\n\nCases like your block iterator are exactly what the significant whitespace branch is going to need to be able to handle, before it gets merged back in:\n\n    elements.each(el =&gt;\n      el.click(event =&gt;\n        el.show() if e.active))\n\nI'm keeping : for assignment, but I think you're right about the +: operator (and friends). I've pushed a commit that goes back to the familiar += form.\n\nThanks!", "subreddit_id": "t5_2fwo", "name": "t1_c0hq6oa", "author": "jashkenas", "downs": 1, "created": 1261755243.0, "created_utc": 1261755243.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks for taking the time to try this. It's detailed reports like these that really help get things fixed. Not allowing chained function calls was an oversight in the grammar. I've pushed a commit that fixes it. Your for-loop example compiles into:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;my_for(start, end, step)(function(v) {\n  return do_stuff();\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Since I'm compiling directly to JavaScript, and not adding extra stuff at runtime, I'm not sure if I could add the efficient range generators that you're asking for, but ranges certainly could be expanded into their equivalent arrays at runtime. Or better, perhaps ranges are special arguments to array comprehensions, that get converted into the equivalent for loop.&lt;/p&gt;\n\n&lt;p&gt;Cases like your block iterator are exactly what the significant whitespace branch is going to need to be able to handle, before it gets merged back in:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;elements.each(el =&amp;gt;\n  el.click(event =&amp;gt;\n    el.show() if e.active))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I'm keeping : for assignment, but I think you're right about the +: operator (and friends). I've pushed a commit that goes back to the familiar += form.&lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hq2l3", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "Right, I began hacking around with it today. One thing that I think would be nice is something like ruby's postfix blocks, so you can go, for my for-loop example:\n\n    my_for(start,end,step): v =&gt;\n       do_stuff()\n\nI added this in my local branch, but it also changes : to =, and adds real iterators, plus an \"end\" keyword as a stopgap until significant whitespace comes in.\n\nThe way I added iterators was just to assume that whatever was passed in to the comprehension supported the iterator interface, and then I extended Array myself to support it. This is indeed extending runtime semantics, but, for example, I would like to do something like a DOM comprehension, and Array Comprehensions are not going to be performant enough. If you don't support generic iterators, this is going to be a royal pain in the ass for me to keep adding them to your version. Even if you give them different syntax, I don't mind, maybe:\n\n    blah blah with i from range(0,100) if i % 2 == 0\n\nfor a generic iterator, and for arrays:\n\n    blah blah for i in [0,1,2,3...,99,100] if i % 2 == 0\n\nAlthough if you just extended arrays to be iterators, then why bother?\n\nNote my iterators are responsible for the entire comprehension (including the if condition), and so the comprehension is just a for-loop wrapper around it.\n\nAlso, if you add iterators, a pre-fix iteration form would be nice:\n\n    for i in range(0,100)\n        alert(i)\n\nThe reason i would like this is simply because currently you can't perform multi-line statements inside a list comprehension, so you have to resort to while loops or rolling your own version of the above using higher order functions.\n\nFinally, have you considered allowing both : and = for variable assignment at least? because if I write:\n\n    a: 4\n    b: 3\n    a: 6\n\nThen I almost feel like the second a is a different a to the first, but instead i am actually overwriting the first a. In Haskell or similar it would be okay, because a is merely shadowing the previous binding. But in JS I am trying to say \"overwrite a with 6\" and a colon really doesn't convey that semantics for me, so this would work better:\n\n     a: 4\n     b: 3\n     a = 6\n\nEven though they would be semantically equivalent, I think allowing that freedom is a good thing.", "subreddit_id": "t5_2fwo", "name": "t1_c0hq9qy", "author": "kamatsu", "downs": 0, "created": 1261760785.0, "created_utc": 1261760785.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Right, I began hacking around with it today. One thing that I think would be nice is something like ruby's postfix blocks, so you can go, for my for-loop example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;my_for(start,end,step): v =&amp;gt;\n   do_stuff()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I added this in my local branch, but it also changes : to =, and adds real iterators, plus an \"end\" keyword as a stopgap until significant whitespace comes in.&lt;/p&gt;\n\n&lt;p&gt;The way I added iterators was just to assume that whatever was passed in to the comprehension supported the iterator interface, and then I extended Array myself to support it. This is indeed extending runtime semantics, but, for example, I would like to do something like a DOM comprehension, and Array Comprehensions are not going to be performant enough. If you don't support generic iterators, this is going to be a royal pain in the ass for me to keep adding them to your version. Even if you give them different syntax, I don't mind, maybe:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;blah blah with i from range(0,100) if i % 2 == 0\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;for a generic iterator, and for arrays:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;blah blah for i in [0,1,2,3...,99,100] if i % 2 == 0\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Although if you just extended arrays to be iterators, then why bother?&lt;/p&gt;\n\n&lt;p&gt;Note my iterators are responsible for the entire comprehension (including the if condition), and so the comprehension is just a for-loop wrapper around it.&lt;/p&gt;\n\n&lt;p&gt;Also, if you add iterators, a pre-fix iteration form would be nice:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for i in range(0,100)\n    alert(i)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The reason i would like this is simply because currently you can't perform multi-line statements inside a list comprehension, so you have to resort to while loops or rolling your own version of the above using higher order functions.&lt;/p&gt;\n\n&lt;p&gt;Finally, have you considered allowing both : and = for variable assignment at least? because if I write:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;a: 4\nb: 3\na: 6\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then I almost feel like the second a is a different a to the first, but instead i am actually overwriting the first a. In Haskell or similar it would be okay, because a is merely shadowing the previous binding. But in JS I am trying to say \"overwrite a with 6\" and a colon really doesn't convey that semantics for me, so this would work better:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; a: 4\n b: 3\n a = 6\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Even though they would be semantically equivalent, I think allowing that freedom is a good thing.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hq6oa", "likes": null, "replies": "", "id": "c0hq9qy", "subreddit": "programming", "ups": 4}}, {"kind": "t1", "data": {"body": "By the way, I know how to and have implemented significant indentation in some languages.\n\nIt's best done in the lexer, you add some magic that produces INDENT, DEDENT or standard NEWLINE tokens.\n\nAlso, can you add a mechanism to escape a newline?", "subreddit_id": "t5_2fwo", "name": "t1_c0hqqc2", "author": "kamatsu", "downs": 0, "created": 1261789348.0, "created_utc": 1261789348.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;By the way, I know how to and have implemented significant indentation in some languages.&lt;/p&gt;\n\n&lt;p&gt;It's best done in the lexer, you add some magic that produces INDENT, DEDENT or standard NEWLINE tokens.&lt;/p&gt;\n\n&lt;p&gt;Also, can you add a mechanism to escape a newline?&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hq6oa", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "Hey kamatsu -- why don't we continue this discussion with Issues over on GitHub -- these comments are pretty dead by now:\n\nhttp://github.com/jashkenas/coffee-script/issues\n\nRecent updates have added = as an equivalent operator to :, created the beginnings of a range literal that we can use for array comprehensions, and converted all assignment from statements into expressions.\n\nIf you want to help with significant whitespace, that would be great. The basics are working over on the whitespace branch with a lexer similar to the one you describe, with INDENT, OUTDENT, and \"\\n\" tokens. The tricky case is the one I mentioned above:\n\n    elements.each(el =&gt;\n      el.click(event =&gt;\n        el.show() if e.active))\n\nThe two outer functions need to be closed before the closing parentheses and big OUTDENT occurs. I'm a bit at a loss for how to implement this in the grammar.\n\nAs for a newline escaper, we could add a \"\\\" to the lexer quite easily, but it would be better to do what Ruby does, and ignore newlines that we know to be in the middle of unfinished expressions:\n\n    ten: 1 + 2 +\n      3 + 4\n\nIf you have any ideas on that subject, open a ticket and let me know.", "subreddit_id": "t5_2fwo", "name": "t1_c0hr5k7", "author": "jashkenas", "downs": 0, "created": 1261813539.0, "created_utc": 1261813539.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Hey kamatsu -- why don't we continue this discussion with Issues over on GitHub -- these comments are pretty dead by now:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://github.com/jashkenas/coffee-script/issues\" &gt;http://github.com/jashkenas/coffee-script/issues&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Recent updates have added = as an equivalent operator to :, created the beginnings of a range literal that we can use for array comprehensions, and converted all assignment from statements into expressions.&lt;/p&gt;\n\n&lt;p&gt;If you want to help with significant whitespace, that would be great. The basics are working over on the whitespace branch with a lexer similar to the one you describe, with INDENT, OUTDENT, and \"\\n\" tokens. The tricky case is the one I mentioned above:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;elements.each(el =&amp;gt;\n  el.click(event =&amp;gt;\n    el.show() if e.active))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The two outer functions need to be closed before the closing parentheses and big OUTDENT occurs. I'm a bit at a loss for how to implement this in the grammar.&lt;/p&gt;\n\n&lt;p&gt;As for a newline escaper, we could add a \"\\\" to the lexer quite easily, but it would be better to do what Ruby does, and ignore newlines that we know to be in the middle of unfinished expressions:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;ten: 1 + 2 +\n  3 + 4\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you have any ideas on that subject, open a ticket and let me know.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hqqc2", "likes": null, "replies": "", "id": "c0hr5k7", "subreddit": "programming", "ups": 2}}], "after": null, "before": null}}, "id": "c0hqqc2", "subreddit": "programming", "ups": 2}}], "after": null, "before": null}}, "id": "c0hq6oa", "subreddit": "programming", "ups": 4}}], "after": null, "before": null}}, "id": "c0hq2l3", "subreddit": "programming", "ups": 6}}, {"kind": "t1", "data": {"body": "*Much* nicer looking! I don't use Javascript, so maybe I'm off-base on this, but does\n\n    doubleit: x=&gt; x * 2.\n\nuse a float, or an int, or does it even matter?", "subreddit_id": "t5_2fwo", "name": "t1_c0hoxce", "author": "dp01n0m1903", "downs": 0, "created": 1261680648.0, "created_utc": 1261680648.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;em&gt;Much&lt;/em&gt; nicer looking! I don't use Javascript, so maybe I'm off-base on this, but does&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;doubleit: x=&amp;gt; x * 2.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;use a float, or an int, or does it even matter?&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t3_ai9kk", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "JavaScript, for better or for worse, only has a single type of number, a 64-bit floating point number. Interestingly enough, this is actually the main point of contention over ECMAScript 5 -- IBM wants to change the number representation to something more accurate for decimals, but slower. In any case, there's only one kind of number in CoffeeScript -- the JavaScript kind.", "subreddit_id": "t5_2fwo", "name": "t1_c0hoxn1", "author": "jashkenas", "downs": 0, "created": 1261680978.0, "created_utc": 1261680978.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;JavaScript, for better or for worse, only has a single type of number, a 64-bit floating point number. Interestingly enough, this is actually the main point of contention over ECMAScript 5 -- IBM wants to change the number representation to something more accurate for decimals, but slower. In any case, there's only one kind of number in CoffeeScript -- the JavaScript kind.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hoxce", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "Aha! Thanks for the info.", "subreddit_id": "t5_2fwo", "name": "t1_c0hoy7p", "author": "dp01n0m1903", "downs": 0, "created": 1261681689.0, "created_utc": 1261681689.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Aha! Thanks for the info.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hoxn1", "likes": null, "replies": "", "id": "c0hoy7p", "subreddit": "programming", "ups": 2}}], "after": null, "before": null}}, "id": "c0hoxn1", "subreddit": "programming", "ups": 13}}], "after": null, "before": null}}, "id": "c0hoxce", "subreddit": "programming", "ups": 4}}, {"kind": "t1", "data": {"body": "My only beef is what aint.  isnt would sound less slang ;-)\n\nOverall bravo!", "subreddit_id": "t5_2fwo", "name": "t1_c0hpb0l", "author": "xutopia", "downs": 2, "created": 1261698862.0, "created_utc": 1261698862.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My only beef is what aint.  isnt would sound less slang ;-)&lt;/p&gt;\n\n&lt;p&gt;Overall bravo!&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t3_ai9kk", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "Originally, I thought that \"aint\" looked less strange without the apostrophe than \"isnt\" does, but with syntax highlighting and all, I think you're quite right. I've pushed a change to replace \"aint\" with \"isnt\", and it'll go out with the next release.", "subreddit_id": "t5_2fwo", "name": "t1_c0hpecs", "author": "jashkenas", "downs": 0, "created": 1261704255.0, "created_utc": 1261704255.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Originally, I thought that \"aint\" looked less strange without the apostrophe than \"isnt\" does, but with syntax highlighting and all, I think you're quite right. I've pushed a change to replace \"aint\" with \"isnt\", and it'll go out with the next release.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hpb0l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "Just keep both?", "subreddit_id": "t5_2fwo", "name": "t1_c0hpkeh", "author": "SohumB", "downs": 1, "created": 1261713863.0, "created_utc": 1261713863.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Just keep both?&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hpecs", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "Definitely keep both.  It allows people to write whichever way is comfortable.", "subreddit_id": "t5_2fwo", "name": "t1_c0hqdgd", "author": "jrrl", "downs": 1, "created": 1261766868.0, "created_utc": 1261766868.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Definitely keep both.  It allows people to write whichever way is comfortable.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hpkeh", "likes": null, "replies": "", "id": "c0hqdgd", "subreddit": "programming", "ups": 2}}], "after": null, "before": null}}, "id": "c0hpkeh", "subreddit": "programming", "ups": 6}}, {"kind": "t1", "data": {"body": "I personally think you should stick with aint.\n\nI'm used to typing isn't, and without the apostrophe, it will look out of place.\n\nJust thought I'd throw in my opinion. Overall, great work with the project!", "subreddit_id": "t5_2fwo", "name": "t1_c0hpjuo", "author": "Foo7", "downs": 1, "created": 1261713112.0, "created_utc": 1261713112.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I personally think you should stick with aint.&lt;/p&gt;\n\n&lt;p&gt;I'm used to typing isn't, and without the apostrophe, it will look out of place.&lt;/p&gt;\n\n&lt;p&gt;Just thought I'd throw in my opinion. Overall, great work with the project!&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hpecs", "likes": null, "replies": "", "id": "c0hpjuo", "subreddit": "programming", "ups": 4}}], "after": null, "before": null}}, "id": "c0hpecs", "subreddit": "programming", "ups": 3}}], "after": null, "before": null}}, "id": "c0hpb0l", "subreddit": "programming", "ups": 4}}, {"kind": "t1", "data": {"body": "This project is actually really awesome. Anyone know if there is something like this for Java?", "subreddit_id": "t5_2fwo", "name": "t1_c0hpasy", "author": "ICanHazMoo", "downs": 0, "created": 1261698526.0, "created_utc": 1261698526.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This project is actually really awesome. Anyone know if there is something like this for Java?&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t3_ai9kk", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "Groovy might fit your needs?\nhttp://en.wikipedia.org/wiki/Groovy_(programming_language)", "subreddit_id": "t5_2fwo", "name": "t1_c0hphcw", "author": "SanjayM", "downs": 0, "created": 1261709458.0, "created_utc": 1261709458.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Groovy might fit your needs?\n&lt;a href=\"http://en.wikipedia.org/wiki/Groovy_\" &gt;http://en.wikipedia.org/wiki/Groovy_&lt;/a&gt;(programming_language)&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hpasy", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "from what i understand Groovy compiles to java byte code rather than to java itself. :-(", "subreddit_id": "t5_2fwo", "name": "t1_c0hponm", "author": "ICanHazMoo", "downs": 0, "created": 1261718537.0, "created_utc": 1261718537.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;from what i understand Groovy compiles to java byte code rather than to java itself. :-(&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hphcw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "[But then you can just turn the bytecode back into Java](http://java.decompiler.free.fr/)", "subreddit_id": "t5_2fwo", "name": "t1_c0hptzz", "author": "deafbybeheading", "downs": 0, "created": 1261724180.0, "created_utc": 1261724180.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"http://java.decompiler.free.fr/\" &gt;But then you can just turn the bytecode back into Java&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hponm", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "I'm not sure about this either way but wouldn't that change the variable and object names?", "subreddit_id": "t5_2fwo", "name": "t1_c0hpwoa", "author": "ICanHazMoo", "downs": 0, "created": 1261727944.0, "created_utc": 1261727944.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I'm not sure about this either way but wouldn't that change the variable and object names?&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hptzz", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "I wasn't entirely serious. I think there's enough metadata to maintain identifier names, but last time I used JD, it did decompile some of my breaks and continues into gotos, so it's certainly far from perfect.", "subreddit_id": "t5_2fwo", "name": "t1_c0hpwy8", "author": "deafbybeheading", "downs": 0, "created": 1261728409.0, "created_utc": 1261728409.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I wasn't entirely serious. I think there's enough metadata to maintain identifier names, but last time I used JD, it did decompile some of my breaks and continues into gotos, so it's certainly far from perfect.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hpwoa", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "ah okay. Good to know. I was afraid I have been missing the bus this whole time", "subreddit_id": "t5_2fwo", "name": "t1_c0hpxnq", "author": "ICanHazMoo", "downs": 0, "created": 1261729735.0, "created_utc": 1261729735.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;ah okay. Good to know. I was afraid I have been missing the bus this whole time&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hpwy8", "likes": null, "replies": "", "id": "c0hpxnq", "subreddit": "programming", "ups": 1}}], "after": null, "before": null}}, "id": "c0hpwy8", "subreddit": "programming", "ups": 1}}], "after": null, "before": null}}, "id": "c0hpwoa", "subreddit": "programming", "ups": 1}}], "after": null, "before": null}}, "id": "c0hptzz", "subreddit": "programming", "ups": 1}}], "after": null, "before": null}}, "id": "c0hponm", "subreddit": "programming", "ups": 2}}], "after": null, "before": null}}, "id": "c0hphcw", "subreddit": "programming", "ups": 2}}, {"kind": "t1", "data": {"body": "there was [linj](http://lambda-the-ultimate.org/classic/message12022.html), which compiled a lisp dialect to human-readable java. appears to have died, though", "subreddit_id": "t5_2fwo", "name": "t1_c0hu56m", "author": "zem", "downs": 0, "created": 1262006772.0, "created_utc": 1262006772.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;there was &lt;a href=\"http://lambda-the-ultimate.org/classic/message12022.html\" &gt;linj&lt;/a&gt;, which compiled a lisp dialect to human-readable java. appears to have died, though&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hpasy", "likes": null, "replies": "", "id": "c0hu56m", "subreddit": "programming", "ups": 1}}], "after": null, "before": null}}, "id": "c0hpasy", "subreddit": "programming", "ups": 3}}, {"kind": "t1", "data": {"body": "Honest to goodness though, how many people actually does a lot of \"logic\" programming on JS? For me its mostly DOM transversal/manipulation (with JQuery). Do we REALLY need this?", "subreddit_id": "t5_2fwo", "name": "t1_c0hp0eq", "author": "nubela", "downs": 2, "created": 1261684447.0, "created_utc": 1261684447.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Honest to goodness though, how many people actually does a lot of \"logic\" programming on JS? For me its mostly DOM transversal/manipulation (with JQuery). Do we REALLY need this?&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t3_ai9kk", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "Yes, we do!\n\nThe whole user experience is relies on JS, and I'm not talking just about cheesy effects, the whole paradigm of what should be done on server and what should be executed in browser has shifted, browser is not a dummy-thing anymore, therefor you can move a lot of stuff to browser - don't feed it with pre-generated JS code what to do (like Rails/RJS do by default), feed it with meaningful data.\n\nYour server-side code can be gorgeous, your app could do miracles, but without magnificent UI to show that it just won't gain any momentum.", "subreddit_id": "t5_2fwo", "name": "t1_c0hp19z", "author": "josipl", "downs": 1, "created": 1261685485.0, "created_utc": 1261685485.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yes, we do!&lt;/p&gt;\n\n&lt;p&gt;The whole user experience is relies on JS, and I'm not talking just about cheesy effects, the whole paradigm of what should be done on server and what should be executed in browser has shifted, browser is not a dummy-thing anymore, therefor you can move a lot of stuff to browser - don't feed it with pre-generated JS code what to do (like Rails/RJS do by default), feed it with meaningful data.&lt;/p&gt;\n\n&lt;p&gt;Your server-side code can be gorgeous, your app could do miracles, but without magnificent UI to show that it just won't gain any momentum.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hp0eq", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "Absolutely. A lot of the ideas CoffeeScript come from pain points with building rich client-side applications in JavaScript. At [DocumentCloud](http://documentcloud.org), we're using a full MVC stack in JavaScript, and the server-side Rails code is more of a dumb translator between the database and JSON, with access control. All of the interesting views, interactions, and visualizations are in JavaScript. That's where [Underscore.js](http://documentcloud.github.com/underscore/) came from, and that's what CoffeeScript is a thought experiment to try and address.", "subreddit_id": "t5_2fwo", "name": "t1_c0hp1io", "author": "jashkenas", "downs": 0, "created": 1261685811.0, "created_utc": 1261685811.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Absolutely. A lot of the ideas CoffeeScript come from pain points with building rich client-side applications in JavaScript. At &lt;a href=\"http://documentcloud.org\" &gt;DocumentCloud&lt;/a&gt;, we're using a full MVC stack in JavaScript, and the server-side Rails code is more of a dumb translator between the database and JSON, with access control. All of the interesting views, interactions, and visualizations are in JavaScript. That's where &lt;a href=\"http://documentcloud.github.com/underscore/\" &gt;Underscore.js&lt;/a&gt; came from, and that's what CoffeeScript is a thought experiment to try and address.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hp19z", "likes": null, "replies": "", "id": "c0hp1io", "subreddit": "programming", "ups": 3}}], "after": null, "before": null}}, "id": "c0hp19z", "subreddit": "programming", "ups": 6}}, {"kind": "t1", "data": {"body": "http://qooxdoo.org/\n\nThere are people moving a lot of logic to the client side.\nBut they are all fighting the syntax and the lack of strictness of javascript.\n\nexamples with code:\nhttp://demo.qooxdoo.org/current/playground/#Calculator\n\nThis shows a client side calculator, in a client-side rendered movable, closable window. \n\n", "subreddit_id": "t5_2fwo", "name": "t1_c0hp7pv", "author": "RalfN", "downs": 0, "created": 1261693864.0, "created_utc": 1261693864.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"http://qooxdoo.org/\" &gt;http://qooxdoo.org/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;There are people moving a lot of logic to the client side.\nBut they are all fighting the syntax and the lack of strictness of javascript.&lt;/p&gt;\n\n&lt;p&gt;examples with code:\n&lt;a href=\"http://demo.qooxdoo.org/current/playground/#Calculator\" &gt;http://demo.qooxdoo.org/current/playground/#Calculator&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This shows a client side calculator, in a client-side rendered movable, closable window.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hp0eq", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "&gt; the lack of strictness of javascript.\n\nAre we talking about Hindle-Mayer BDSM strictness or?", "subreddit_id": "t5_2fwo", "name": "t1_c0hpokf", "author": "Zarutian", "downs": 3, "created": 1261718454.0, "created_utc": 1261718454.0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;&lt;p&gt;the lack of strictness of javascript.&lt;/p&gt;&lt;/blockquote&gt;\n\n&lt;p&gt;Are we talking about Hindle-Mayer BDSM strictness or?&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hp7pv", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "No, stuff like qooxdoo just does the ordinary type checking.\n\nThey automatically setup setters and getters for your properties that validate the type at run-time. The methods are not validated at all. And all the validation is done during run-time. But even that little piece of dynamic typechecking makes a whole lot of difference for maintainability of large javascript apps. \n\n\nhey also have their own nice little unit-test system. You have to imagine in Javascript, that not only  is there no static typechecking, there is no run-time typechecking, instead values are automatically casted into something useful. So not only are type errors not happening at the right moment (ie during compile time), nor at the right place (ie where we combined perfectly fine pieces of code that weren't compatible), they just don't happen. Instead they convert your string into an integer.\n\nThis is the biggest failure of Javascript. Thankfully, some of its strong suits, make up for it and allow you to work around it. And guys like ExtJS, Qooxdoo, are all doing this nicely. \n\n\n", "subreddit_id": "t5_2fwo", "name": "t1_c0hrcn2", "author": "RalfN", "downs": 0, "created": 1261835148.0, "created_utc": 1261835148.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No, stuff like qooxdoo just does the ordinary type checking.&lt;/p&gt;\n\n&lt;p&gt;They automatically setup setters and getters for your properties that validate the type at run-time. The methods are not validated at all. And all the validation is done during run-time. But even that little piece of dynamic typechecking makes a whole lot of difference for maintainability of large javascript apps.&lt;/p&gt;\n\n&lt;p&gt;hey also have their own nice little unit-test system. You have to imagine in Javascript, that not only  is there no static typechecking, there is no run-time typechecking, instead values are automatically casted into something useful. So not only are type errors not happening at the right moment (ie during compile time), nor at the right place (ie where we combined perfectly fine pieces of code that weren't compatible), they just don't happen. Instead they convert your string into an integer.&lt;/p&gt;\n\n&lt;p&gt;This is the biggest failure of Javascript. Thankfully, some of its strong suits, make up for it and allow you to work around it. And guys like ExtJS, Qooxdoo, are all doing this nicely.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hpokf", "likes": null, "replies": "", "id": "c0hrcn2", "subreddit": "programming", "ups": 1}}], "after": null, "before": null}}, "id": "c0hpokf", "subreddit": "programming", "ups": 1}}], "after": null, "before": null}}, "id": "c0hp7pv", "subreddit": "programming", "ups": 3}}, {"kind": "t1", "data": {"body": "I'm just going to leave [this](http://sf.net/projects/webglu) here.", "subreddit_id": "t5_2fwo", "name": "t1_c0hpvxe", "author": "Bjartr", "downs": 0, "created": 1261726774.0, "created_utc": 1261726774.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I'm just going to leave &lt;a href=\"http://sf.net/projects/webglu\" &gt;this&lt;/a&gt; here.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hp0eq", "likes": null, "replies": "", "id": "c0hpvxe", "subreddit": "programming", "ups": 1}}], "after": null, "before": null}}, "id": "c0hp0eq", "subreddit": "programming", "ups": 4}}, {"kind": "t1", "data": {"body": "As someone that learned Javascript as their first language, this is kind of confusing to me.", "subreddit_id": "t5_2fwo", "name": "t1_c0hp4cm", "author": "bballbackus", "downs": 1, "created": 1261689291.0, "created_utc": 1261689291.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;As someone that learned Javascript as their first language, this is kind of confusing to me.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t3_ai9kk", "likes": null, "replies": "", "id": "c0hp4cm", "subreddit": "programming", "ups": 4}}, {"kind": "t1", "data": {"body": "    grade: student =&gt;\n      if student.excellent_work\n        \"A+\"\n      else if student.okay_stuff\n        if student.tried_hard then \"B\" else \"B-\".\n      else\n        \"C\"..\n\nIck. \"`..`\"? The \"`.`\" to end a block is really nasty when you get nested blocks. Especially since editors won't match \"`.`\" against the beginning of a block as it isn't a brace (at least, not until every editor gets their own mode for your syntax). And it seems like it would be really easy to forget one \"`.`\" and have all kinds of problems with the nesting.\n\nWhy not just use Python-style significant whitespace? Removes even more redundancy, and means that people are less likely to screw up indentation and nesting.", "subreddit_id": "t5_2fwo", "name": "t1_c0hptw5", "author": "annodomini", "downs": 1, "created": 1261724040.0, "created_utc": 1261724040.0, "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;grade: student =&amp;gt;\n  if student.excellent_work\n    \"A+\"\n  else if student.okay_stuff\n    if student.tried_hard then \"B\" else \"B-\".\n  else\n    \"C\"..\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Ick. \"&lt;code&gt;..&lt;/code&gt;\"? The \"&lt;code&gt;.&lt;/code&gt;\" to end a block is really nasty when you get nested blocks. Especially since editors won't match \"&lt;code&gt;.&lt;/code&gt;\" against the beginning of a block as it isn't a brace (at least, not until every editor gets their own mode for your syntax). And it seems like it would be really easy to forget one \"&lt;code&gt;.&lt;/code&gt;\" and have all kinds of problems with the nesting.&lt;/p&gt;\n\n&lt;p&gt;Why not just use Python-style significant whitespace? Removes even more redundancy, and means that people are less likely to screw up indentation and nesting.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t3_ai9kk", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "I've got a branch that's playing around with Python-style whitespace. If we can make it flexible enough to handle cases like the above, it'll go in the next release.", "subreddit_id": "t5_2fwo", "name": "t1_c0hpvju", "author": "jashkenas", "downs": 0, "created": 1261726220.0, "created_utc": 1261726220.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I've got a branch that's playing around with Python-style whitespace. If we can make it flexible enough to handle cases like the above, it'll go in the next release.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hptw5", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "Cool. That would make the syntax much, much more palatable.\n\nI like the general idea here. Haven't played around with it enough to see how it works in practice. I'm actually in the process of developing a domain-specific language that compiles down to JavaScript, so it's nice to see what some other people have come up with in this space.", "subreddit_id": "t5_2fwo", "name": "t1_c0hpvzx", "author": "annodomini", "downs": 0, "created": 1261726901.0, "created_utc": 1261726901.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Cool. That would make the syntax much, much more palatable.&lt;/p&gt;\n\n&lt;p&gt;I like the general idea here. Haven't played around with it enough to see how it works in practice. I'm actually in the process of developing a domain-specific language that compiles down to JavaScript, so it's nice to see what some other people have come up with in this space.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hpvju", "likes": null, "replies": "", "id": "c0hpvzx", "subreddit": "programming", "ups": 5}}], "after": null, "before": null}}, "id": "c0hpvju", "subreddit": "programming", "ups": 7}}, {"kind": "t1", "data": {"body": "Perhaps you could also add a Lisp-inspired `cond` block?", "subreddit_id": "t5_2fwo", "name": "t1_c0hqeap", "author": "amade", "downs": 0, "created": 1261768243.0, "created_utc": 1261768243.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Perhaps you could also add a Lisp-inspired &lt;code&gt;cond&lt;/code&gt; block?&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hptw5", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "What's the benefit of a lisp style `cond` block over `if...else if...else`? It's not the `if...else if` that is adding any extra nesting of blocks, so really all you would be doing would be getting rid of the `else if` statements in favor of... well, you'd still need something to distinguish the different cases, when you don't have parentheses as in Lisp. So, i'm not sure how a Lisp-style cond block would work here, other than replacing `else if` with some other token.", "subreddit_id": "t5_2fwo", "name": "t1_c0hqiu8", "author": "annodomini", "downs": 0, "created": 1261775795.0, "created_utc": 1261775795.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What's the benefit of a lisp style &lt;code&gt;cond&lt;/code&gt; block over &lt;code&gt;if...else if...else&lt;/code&gt;? It's not the &lt;code&gt;if...else if&lt;/code&gt; that is adding any extra nesting of blocks, so really all you would be doing would be getting rid of the &lt;code&gt;else if&lt;/code&gt; statements in favor of... well, you'd still need something to distinguish the different cases, when you don't have parentheses as in Lisp. So, i'm not sure how a Lisp-style cond block would work here, other than replacing &lt;code&gt;else if&lt;/code&gt; with some other token.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hqeap", "likes": null, "replies": "", "id": "c0hqiu8", "subreddit": "programming", "ups": 1}}], "after": null, "before": null}}, "id": "c0hqeap", "subreddit": "programming", "ups": 1}}], "after": null, "before": null}}, "id": "c0hptw5", "subreddit": "programming", "ups": 5}}, {"kind": "t1", "data": {"body": "Pretty sweet idea, I always disliked the complex javascript syntax and wished it was more like ruby/python.", "subreddit_id": "t5_2fwo", "name": "t1_c0hovqe", "author": "nightwolfz", "downs": 1, "created": 1261678763.0, "created_utc": 1261678763.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Pretty sweet idea, I always disliked the complex javascript syntax and wished it was more like ruby/python.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t3_ai9kk", "likes": null, "replies": "", "id": "c0hovqe", "subreddit": "programming", "ups": 3}}, {"kind": "t1", "data": {"body": "The syntax is quite nice. I fear that significant newlines would make it hard to embed in an HTML page, but otherwise I think this is a really nice looking language. Good job!", "subreddit_id": "t5_2fwo", "name": "t1_c0hoz89", "author": "munificent", "downs": 0, "created": 1261682966.0, "created_utc": 1261682966.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The syntax is quite nice. I fear that significant newlines would make it hard to embed in an HTML page, but otherwise I think this is a really nice looking language. Good job!&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t3_ai9kk", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "Quite right, if one were to use it for a webpage  -- which I don't necessarily recommend at this point -- you'd compile it first to JavaScript, and then probably pass it through the YUI Compressor or Closure Compiler before it ever touches HTML.\n\nIn the future, if we ever get a JavaScript version of the CoffeeScript compiler, you'd probably convert newlines to semicolons as part of the minifying process.", "subreddit_id": "t5_2fwo", "name": "t1_c0hozia", "author": "jashkenas", "downs": 0, "created": 1261683323.0, "created_utc": 1261683323.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Quite right, if one were to use it for a webpage  -- which I don't necessarily recommend at this point -- you'd compile it first to JavaScript, and then probably pass it through the YUI Compressor or Closure Compiler before it ever touches HTML.&lt;/p&gt;\n\n&lt;p&gt;In the future, if we ever get a JavaScript version of the CoffeeScript compiler, you'd probably convert newlines to semicolons as part of the minifying process.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hoz89", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "&gt; Quite right, if one were to use it for a webpage -- which I don't necessarily recommend at this point\n\nI should point out that, overall, I really like significant newlines. I hate having to end every expression with a \";\" when 99.9% of the time those occur at the end of the line.\n\nI can just see it being a problem if you want to cram a bit of CoffeeScript in a onClick attribute. One option would be to allow either newlines or ;, and have them mean the same thing.", "subreddit_id": "t5_2fwo", "name": "t1_c0hph4j", "author": "munificent", "downs": 0, "created": 1261709114.0, "created_utc": 1261709114.0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;&lt;p&gt;Quite right, if one were to use it for a webpage -- which I don't necessarily recommend at this point&lt;/p&gt;&lt;/blockquote&gt;\n\n&lt;p&gt;I should point out that, overall, I really like significant newlines. I hate having to end every expression with a \";\" when 99.9% of the time those occur at the end of the line.&lt;/p&gt;\n\n&lt;p&gt;I can just see it being a problem if you want to cram a bit of CoffeeScript in a onClick attribute. One option would be to allow either newlines or ;, and have them mean the same thing.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hozia", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "That's exactly how it is. If you look at the grammar, Expressions are separated by a Terminator, which is a newline or a semicolon.\n\nLikewise, conditions are separated by their bodies by a Then, which is either a Terminator or \"then\" for single-line conditionals.", "subreddit_id": "t5_2fwo", "name": "t1_c0hpqg9", "author": "jashkenas", "downs": 0, "created": 1261720227.0, "created_utc": 1261720227.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That's exactly how it is. If you look at the grammar, Expressions are separated by a Terminator, which is a newline or a semicolon.&lt;/p&gt;\n\n&lt;p&gt;Likewise, conditions are separated by their bodies by a Then, which is either a Terminator or \"then\" for single-line conditionals.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hph4j", "likes": null, "replies": "", "id": "c0hpqg9", "subreddit": "programming", "ups": 2}}, {"kind": "t1", "data": {"body": "&gt; I can just see it being a problem if you want to cram a bit of CoffeeScript in a onClick attribute.\n\nBut of course if you're separating your presentation and behavior, that problem would never come up. :)", "subreddit_id": "t5_2fwo", "name": "t1_c0hpkfq", "author": "enaeseth", "downs": 0, "created": 1261713903.0, "created_utc": 1261713903.0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;&lt;p&gt;I can just see it being a problem if you want to cram a bit of CoffeeScript in a onClick attribute.&lt;/p&gt;&lt;/blockquote&gt;\n\n&lt;p&gt;But of course if you're separating your presentation and behavior, that problem would never come up. :)&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hph4j", "likes": null, "replies": "", "id": "c0hpkfq", "subreddit": "programming", "ups": 1}}], "after": null, "before": null}}, "id": "c0hph4j", "subreddit": "programming", "ups": 2}}], "after": null, "before": null}}, "id": "c0hozia", "subreddit": "programming", "ups": 4}}], "after": null, "before": null}}, "id": "c0hoz89", "subreddit": "programming", "ups": 2}}, {"kind": "t1", "data": {"body": "A very pleasant syntax. Well done!", "subreddit_id": "t5_2fwo", "name": "t1_c0hp2k2", "author": "chneukirchen", "downs": 0, "created": 1261687146.0, "created_utc": 1261687146.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;A very pleasant syntax. Well done!&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t3_ai9kk", "likes": null, "replies": "", "id": "c0hp2k2", "subreddit": "programming", "ups": 2}}, {"kind": "t1", "data": {"body": "Reminds me of HAML and SASS. Nice work", "subreddit_id": "t5_2fwo", "name": "t1_c0hp4fc", "author": "alexandercabrera", "downs": 0, "created": 1261689371.0, "created_utc": 1261689371.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Reminds me of HAML and SASS. Nice work&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t3_ai9kk", "likes": null, "replies": "", "id": "c0hp4fc", "subreddit": "programming", "ups": 2}}, {"kind": "t1", "data": {"body": "Upmodded for referencing base2. ;)", "subreddit_id": "t5_2fwo", "name": "t1_c0hpji8", "author": "9jack9", "downs": 0, "created": 1261712670.0, "created_utc": 1261712670.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Upmodded for referencing base2. ;)&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t3_ai9kk", "likes": null, "replies": "", "id": "c0hpji8", "subreddit": "programming", "ups": 2}}, {"kind": "t1", "data": {"body": "I can never get on with these kind of things. I've seen a few similar things for CSS but they are never really that good. ", "subreddit_id": "t5_2fwo", "name": "t1_c0hp4kb", "author": "theimben", "downs": 2, "created": 1261689544.0, "created_utc": 1261689544.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I can never get on with these kind of things. I've seen a few similar things for CSS but they are never really that good.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t3_ai9kk", "likes": null, "replies": "", "id": "c0hp4kb", "subreddit": "programming", "ups": 4}}, {"kind": "t1", "data": {"body": "Not to piss on your pool but you replaced '=' with ':', 'function' with '=&gt;' and moved 'if' from the front of the bus to the back. Nothing new.\n\nYou add extra vars  and split lines everywhere just to confuse JS syntax even more, but these two lines are practically the same:\n\ncube:   x =&gt; square(x) * x\n\ncube = function(x) return square(x) * x\n\n", "subreddit_id": "t5_2fwo", "name": "t1_c0hpa5j", "author": "Wakuko", "downs": 6, "created": 1261697578.0, "created_utc": 1261697578.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Not to piss on your pool but you replaced '=' with ':', 'function' with '=&gt;' and moved 'if' from the front of the bus to the back. Nothing new.&lt;/p&gt;\n\n&lt;p&gt;You add extra vars  and split lines everywhere just to confuse JS syntax even more, but these two lines are practically the same:&lt;/p&gt;\n\n&lt;p&gt;cube:   x =&gt; square(x) * x&lt;/p&gt;\n\n&lt;p&gt;cube = function(x) return square(x) * x&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t3_ai9kk", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "There is something that can be said about this syntactic sugar.  It reads more like human language which helps reduce bugs.\n\n    let_the_wild_rumpus_begin() unless answer is no\n\nWay more readable than the Javascript equivalent:\n\n    if (answer != no){\n      let_the_wild_rumpus_begin();\n    }\n\nAnd it is done in a single line of code to boot.", "subreddit_id": "t5_2fwo", "name": "t1_c0hpau9", "author": "xutopia", "downs": 2, "created": 1261698580.0, "created_utc": 1261698580.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There is something that can be said about this syntactic sugar.  It reads more like human language which helps reduce bugs.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let_the_wild_rumpus_begin() unless answer is no\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Way more readable than the Javascript equivalent:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;if (answer != no){\n  let_the_wild_rumpus_begin();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And it is done in a single line of code to boot.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hpa5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "Your argument is a reductio ad COBOLum.\n\nThe crux is that \"readable\" means quite different things depending on whether one knows the language or not. For example, I find your second code snippet far more readable than the first. Trying to make programming languages look like natural languages when they are fundamentally unlike them is a confusion of contexts that has been tried many times and failed (see first line).", "subreddit_id": "t5_2fwo", "name": "t1_c0hpizu", "author": "gruseom1", "downs": 1, "created": 1261711892.0, "created_utc": 1261711892.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Your argument is a reductio ad COBOLum.&lt;/p&gt;\n\n&lt;p&gt;The crux is that \"readable\" means quite different things depending on whether one knows the language or not. For example, I find your second code snippet far more readable than the first. Trying to make programming languages look like natural languages when they are fundamentally unlike them is a confusion of contexts that has been tried many times and failed (see first line).&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hpau9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "&gt; reductio ad COBOLum\n\nSnipped stashed! ;)", "subreddit_id": "t5_2fwo", "name": "t1_c0hpodw", "author": "Zarutian", "downs": 0, "created": 1261718290.0, "created_utc": 1261718290.0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;&lt;p&gt;reductio ad COBOLum&lt;/p&gt;&lt;/blockquote&gt;\n\n&lt;p&gt;Snipped stashed! ;)&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hpizu", "likes": null, "replies": "", "id": "c0hpodw", "subreddit": "programming", "ups": 2}}], "after": null, "before": null}}, "id": "c0hpizu", "subreddit": "programming", "ups": 8}}, {"kind": "t1", "data": {"body": "    if (!answer) let_the_wild_rumpus_begin()\n\n100% valid javascript", "subreddit_id": "t5_2fwo", "name": "t1_c0hps3z", "author": "Wakuko", "downs": 1, "created": 1261722084.0, "created_utc": 1261722084.0, "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;if (!answer) let_the_wild_rumpus_begin()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;100% valid javascript&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hpau9", "likes": null, "replies": "", "id": "c0hps3z", "subreddit": "programming", "ups": 3}}], "after": null, "before": null}}, "id": "c0hpau9", "subreddit": "programming", "ups": 9}}, {"kind": "t1", "data": {"body": "It could be said that ALL languages are \"just syntactic sugar\" over previous languages.  If you go look at ORIGINAL K&amp;R C, you'll observe that it is pretty close to \"just syntactic sugar\" over assembly.\n\nI get your point, but syntax REALLY matters.", "subreddit_id": "t5_2fwo", "name": "t1_c0hpebe", "author": "tophat02", "downs": 3, "created": 1261704186.0, "created_utc": 1261704186.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It could be said that ALL languages are \"just syntactic sugar\" over previous languages.  If you go look at ORIGINAL K&amp;amp;R C, you'll observe that it is pretty close to \"just syntactic sugar\" over assembly.&lt;/p&gt;\n\n&lt;p&gt;I get your point, but syntax REALLY matters.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hpa5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "If the compiler is verifying some aspect of the program, or rewriting in a way that goes beyond simple rearrangement, it's not the same thing as syntactic sugar. For example, K&amp;R C would convert variable names into stack allocations, which is fundamentally a step above just moving \"if\" around. Converting `if` and `while` statements into `goto`s is similar. It's a simple process, but very useful to the programmer, and goes beyond syntactic sugar.\n\nCoffeeScript seems to be entirely syntactic sugar.", "subreddit_id": "t5_2fwo", "name": "t1_c0hpips", "author": "timmaxw", "downs": 0, "created": 1261711507.0, "created_utc": 1261711507.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If the compiler is verifying some aspect of the program, or rewriting in a way that goes beyond simple rearrangement, it's not the same thing as syntactic sugar. For example, K&amp;amp;R C would convert variable names into stack allocations, which is fundamentally a step above just moving \"if\" around. Converting &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt; statements into &lt;code&gt;goto&lt;/code&gt;s is similar. It's a simple process, but very useful to the programmer, and goes beyond syntactic sugar.&lt;/p&gt;\n\n&lt;p&gt;CoffeeScript seems to be entirely syntactic sugar.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hpebe", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "The lexical scoping thing looks like more than syntactic sugar to me.", "subreddit_id": "t5_2fwo", "name": "t1_c0hpk2y", "author": "mistercow", "downs": 1, "created": 1261713422.0, "created_utc": 1261713422.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The lexical scoping thing looks like more than syntactic sugar to me.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hpips", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "The conversion of statements into expressions by pushing down assignments and returns into inner nodes is another part that goes a bit beyond plain sugar. Brown sugar, maybe.", "subreddit_id": "t5_2fwo", "name": "t1_c0hpqbc", "author": "jashkenas", "downs": 0, "created": 1261720098.0, "created_utc": 1261720098.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The conversion of statements into expressions by pushing down assignments and returns into inner nodes is another part that goes a bit beyond plain sugar. Brown sugar, maybe.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hpk2y", "likes": null, "replies": "", "id": "c0hpqbc", "subreddit": "programming", "ups": 6}}, {"kind": "t1", "data": {"body": "That's true. Good point.", "subreddit_id": "t5_2fwo", "name": "t1_c0hqbyp", "author": "timmaxw", "downs": 0, "created": 1261764291.0, "created_utc": 1261764291.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That's true. Good point.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hpk2y", "likes": null, "replies": "", "id": "c0hqbyp", "subreddit": "programming", "ups": 1}}], "after": null, "before": null}}, "id": "c0hpk2y", "subreddit": "programming", "ups": 4}}], "after": null, "before": null}}, "id": "c0hpips", "subreddit": "programming", "ups": 6}}], "after": null, "before": null}}, "id": "c0hpebe", "subreddit": "programming", "ups": 7}}, {"kind": "t1", "data": {"body": "&gt; these two lines are practically the same:\n&gt; \n&gt; cube: x =&gt; square(x) * x\n&gt;\n&gt; cube = function(x) return square(x) * x\n\nFunny, they look totally different to me.", "subreddit_id": "t5_2fwo", "name": "t1_c0hpi0w", "author": "munificent", "downs": 2, "created": 1261710497.0, "created_utc": 1261710497.0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;&lt;p&gt;these two lines are practically the same:&lt;/p&gt;\n\n&lt;p&gt;cube: x =&gt; square(x) * x&lt;/p&gt;\n\n&lt;p&gt;cube = function(x) return square(x) * x&lt;/p&gt;&lt;/blockquote&gt;\n\n&lt;p&gt;Funny, they look totally different to me.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hpa5j", "likes": null, "replies": "", "id": "c0hpi0w", "subreddit": "programming", "ups": 4}}, {"kind": "t1", "data": {"body": "my #1 bug in javascript is forgetting the 'return'. i'm all for this.", "subreddit_id": "t5_2fwo", "name": "t1_c0hu57v", "author": "zem", "downs": 0, "created": 1262006837.0, "created_utc": 1262006837.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;my #1 bug in javascript is forgetting the 'return'. i'm all for this.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hpa5j", "likes": null, "replies": "", "id": "c0hu57v", "subreddit": "programming", "ups": 1}}], "after": null, "before": null}}, "id": "c0hpa5j", "subreddit": "programming", "ups": 4}}, {"kind": "t1", "data": {"body": "Awesome project.\n\nA minor point, I've always wondered if it's correct to say a language compiles to another one rather than 'translates to'...\n\nanyway, I look forward to playing around with CoffeeScript. It has the right name  ;-)", "subreddit_id": "t5_2fwo", "name": "t1_c0hozgx", "author": "willcode4beer", "downs": 1, "created": 1261683269.0, "created_utc": 1261683269.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Awesome project.&lt;/p&gt;\n\n&lt;p&gt;A minor point, I've always wondered if it's correct to say a language compiles to another one rather than 'translates to'...&lt;/p&gt;\n\n&lt;p&gt;anyway, I look forward to playing around with CoffeeScript. It has the right name  ;-)&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t3_ai9kk", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "It's usually called a source-to-source compiler in literature.", "subreddit_id": "t5_2fwo", "name": "t1_c0hp17i", "author": "digitalmob", "downs": 0, "created": 1261685397.0, "created_utc": 1261685397.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It's usually called a source-to-source compiler in literature.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hozgx", "likes": null, "replies": "", "id": "c0hp17i", "subreddit": "programming", "ups": 4}}, {"kind": "t1", "data": {"body": "&gt;I've always wondered if it's correct to say a language compiles to another one rather than 'translates to'.\n\nOn the one hand, the two are largely synonymous.\n\nOn the other hand, \"compile\" tends to have the connotation of translating from higher level to lower level (such as assembly/machine code), while \"translate\" often implies high level to high level.\n\nThere's also often a connotation that \"compile\" implies full blown semantic analysis, such as type checking, while \"translate\" sometimes implies an almost purely syntactic transformation that may not detect semantic errors the way that compilers are usually expected to.\n\nI really don't think that one is more correct than the other, though, regardless of common connotations.", "subreddit_id": "t5_2fwo", "name": "t1_c0hp09g", "author": "wildeye", "downs": 0, "created": 1261684288.0, "created_utc": 1261684288.0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;&lt;p&gt;I've always wondered if it's correct to say a language compiles to another one rather than 'translates to'.&lt;/p&gt;&lt;/blockquote&gt;\n\n&lt;p&gt;On the one hand, the two are largely synonymous.&lt;/p&gt;\n\n&lt;p&gt;On the other hand, \"compile\" tends to have the connotation of translating from higher level to lower level (such as assembly/machine code), while \"translate\" often implies high level to high level.&lt;/p&gt;\n\n&lt;p&gt;There's also often a connotation that \"compile\" implies full blown semantic analysis, such as type checking, while \"translate\" sometimes implies an almost purely syntactic transformation that may not detect semantic errors the way that compilers are usually expected to.&lt;/p&gt;\n\n&lt;p&gt;I really don't think that one is more correct than the other, though, regardless of common connotations.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hozgx", "likes": null, "replies": "", "id": "c0hp09g", "subreddit": "programming", "ups": 3}}], "after": null, "before": null}}, "id": "c0hozgx", "subreddit": "programming", "ups": 2}}, {"kind": "t1", "data": {"body": "Awesome work! The best holiday present I got. (for now at least, it's still not xmas here)\n\nBut the name... oh well, at least it's not a two-letter name :)", "subreddit_id": "t5_2fwo", "name": "t1_c0hp1hw", "author": "josipl", "downs": 0, "created": 1261685784.0, "created_utc": 1261685784.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Awesome work! The best holiday present I got. (for now at least, it's still not xmas here)&lt;/p&gt;\n\n&lt;p&gt;But the name... oh well, at least it's not a two-letter name :)&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t3_ai9kk", "likes": null, "replies": "", "id": "c0hp1hw", "subreddit": "programming", "ups": 1}}, {"kind": "t1", "data": {"body": "Looks clean. As the project gets more mature, it could gain some traction among the brackets detractor ;)", "subreddit_id": "t5_2fwo", "name": "t1_c0hp9ke", "author": "iampims", "downs": 0, "created": 1261696642.0, "created_utc": 1261696642.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Looks clean. As the project gets more mature, it could gain some traction among the brackets detractor ;)&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t3_ai9kk", "likes": null, "replies": "", "id": "c0hp9ke", "subreddit": "programming", "ups": 1}}, {"kind": "t1", "data": {"body": "This is fantastically beautiful. Thank you!", "subreddit_id": "t5_2fwo", "name": "t1_c0hpfq9", "author": "SohumB", "downs": 0, "created": 1261706675.0, "created_utc": 1261706675.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is fantastically beautiful. Thank you!&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t3_ai9kk", "likes": null, "replies": "", "id": "c0hpfq9", "subreddit": "programming", "ups": 1}}, {"kind": "t1", "data": {"body": "Why do you use a colon for assignment instead of \"=\" or \":=\"?  What is the CoffeeScript equivalent to the JavaScript \"foo.bar[quux] += 5;\"?", "subreddit_id": "t5_2fwo", "name": "t1_c0hplqw", "author": "wekt", "downs": 0, "created": 1261715625.0, "created_utc": 1261715625.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Why do you use a colon for assignment instead of \"=\" or \":=\"?  What is the CoffeeScript equivalent to the JavaScript \"foo.bar[quux] += 5;\"?&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t3_ai9kk", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"body": "+:, I'd assume, from the ||: and &amp;&amp;: examples.", "subreddit_id": "t5_2fwo", "name": "t1_c0hpqxe", "author": "SohumB", "downs": 0, "created": 1261720714.0, "created_utc": 1261720714.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;+:, I'd assume, from the ||: and &amp;amp;&amp;amp;: examples.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t1_c0hplqw", "likes": null, "replies": "", "id": "c0hpqxe", "subreddit": "programming", "ups": 2}}], "after": null, "before": null}}, "id": "c0hplqw", "subreddit": "programming", "ups": 1}}, {"kind": "t1", "data": {"body": "CoffeeScript's now up to 0.1.3, which includes --interactive to launch a CoffeeScript REPL, and --run to compile and execute scripts in a single pass. Both options depend on a working Narwhal installation.", "subreddit_id": "t5_2fwo", "name": "t1_c0hpxd4", "author": "jashkenas", "downs": 0, "created": 1261729235.0, "created_utc": 1261729235.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;CoffeeScript's now up to 0.1.3, which includes --interactive to launch a CoffeeScript REPL, and --run to compile and execute scripts in a single pass. Both options depend on a working Narwhal installation.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t3_ai9kk", "likes": null, "replies": "", "id": "c0hpxd4", "subreddit": "programming", "ups": 1}}, {"kind": "t1", "data": {"body": "Oh... wow.\n\nI love you.", "subreddit_id": "t5_2fwo", "name": "t1_c0hpyqg", "author": "Skitolz", "downs": 0, "created": 1261731881.0, "created_utc": 1261731881.0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Oh... wow.&lt;/p&gt;\n\n&lt;p&gt;I love you.&lt;/p&gt;&lt;/div&gt;", "levenshtein": null, "link_id": "t3_ai9kk", "parent_id": "t3_ai9kk", "likes": null, "replies": "", "id": "c0hpyqg", "subreddit": "programming", "ups": 1}}], "after": null, "before": null}}]
